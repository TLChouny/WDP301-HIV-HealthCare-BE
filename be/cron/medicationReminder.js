const cron = require('node-cron');
const Result = require('../models/Result');
const Booking = require('../models/Booking');
const Notification = require('../models/Notification');

// üî• Ch·∫°y m·ªói ph√∫t
cron.schedule('* * * * *', async () => {
  console.log('üîî Running medication reminder cron job...');

  try {
    const now = new Date();
    const currentHours = String(now.getHours()).padStart(2, '0');
    const currentMinutes = String(now.getMinutes()).padStart(2, '0');
    const currentTime = `${currentHours}:${currentMinutes}`;

    // üîç L·∫•y t·∫•t c·∫£ result c√≥ medicationTime v√† ch∆∞a t·ªõi ng√†y t√°i kh√°m
    const results = await Result.find({
      medicationTime: { $exists: true, $ne: null },
      reExaminationDate: { $gte: now }
    });

    for (const result of results) {
      if (result.medicationTime === currentTime) {
        const booking = await Booking.findById(result.bookingId);

        if (booking && booking.userId) {
          // üí• T·∫°o notification nh·∫Øc u·ªëng thu·ªëc
          await Notification.create({
            notiName: 'Nh·∫Øc nh·ªü u·ªëng thu·ªëc',
            notiDescription: `ƒê√¢y l√† gi·ªù u·ªëng thu·ªëc c·ªßa b·∫°n. Vui l√≤ng u·ªëng thu·ªëc ƒë√∫ng gi·ªù ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu qu·∫£ ƒëi·ªÅu tr·ªã.`,
            userId: booking.userId,
            bookingId: booking._id,
            resultId: result._id
          });

          console.log(`‚úÖ Medication notification sent to userId ${booking.userId} at ${currentTime}`);
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Error in medication reminder cron job:', error);
  }
});
