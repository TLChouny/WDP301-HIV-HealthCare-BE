const cron = require('node-cron');
const dayjs = require('dayjs');
const Result = require('../models/Result');
const { sendSMS } = require('../utils/sendSMS');

// üïê Cron ch·∫°y h√†ng ng√†y l√∫c 5:59 s√°ng
cron.schedule('35 15 * * *', async () => {
  console.log('üîî [Cron] ƒêang ki·ªÉm tra l·ªãch t√°i kh√°m tr∆∞·ªõc 3 ng√†y...');

  const targetDate = dayjs().add(3, 'day').format('YYYY-MM-DD');

  try {
    const results = await Result.find({ reExaminationDate: targetDate }).populate('bookingId');

    if (results.length === 0) {
      console.log(`‚ÑπÔ∏è Kh√¥ng c√≥ b·ªánh nh√¢n n√†o c·∫ßn nh·∫Øc v√†o ng√†y ${targetDate}`);
      return;
    }

    for (const result of results) {
      const booking = result.bookingId;
      if (!booking || !booking.customerPhone) {
        console.warn(`‚ö†Ô∏è B·ªè qua result v√¨ thi·∫øu th√¥ng tin booking ho·∫∑c s·ªë ƒëi·ªán tho·∫°i`);
        continue;
      }

      const rawPhone = booking.customerPhone;
      const phone = rawPhone.startsWith('0') ? `84${rawPhone.slice(1)}` : rawPhone;

      const message = `üìÖ Nh·∫Øc nh·ªü: B·∫°n c√≥ l·ªãch t√°i kh√°m v√†o ng√†y ${result.reExaminationDate}. Vui l√≤ng s·∫Øp x·∫øp th·ªùi gian!`;

      try {
        await sendSMS({ to: phone, text: message }); // ‚úÖ S·ª≠a t·∫°i ƒë√¢y
        console.log(`‚úÖ ƒê√£ g·ª≠i SMS ƒë·∫øn ${phone}`);
      } catch (err) {
        console.error(`‚ùå L·ªói g·ª≠i SMS t·ªõi ${phone}:`, err.message);
      }
    }

  } catch (err) {
    console.error('‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu Result:', err.message);
  }
});
