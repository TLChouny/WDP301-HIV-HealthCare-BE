const mongoose = require("mongoose");

const ResultSchema = new mongoose.Schema(
  {
    // üìù Th√¥ng tin chung cho t·∫•t c·∫£ k·∫øt qu·∫£
    resultName: { type: String, required: true }, // T√™n k·∫øt qu·∫£ (VD: X√©t nghi·ªám PCR l·∫ßn 1)
    resultDescription: { type: String }, // M√¥ t·∫£ th√™m (ch·ªß y·∫øu d√πng cho ARV)
    testerName: { type: String }, // T√™n ng∆∞·ªùi th·ª±c hi·ªán x√©t nghi·ªám (string t·ª± do)
    notes: { type: String }, // Ghi ch√∫ th√™m c·ªßa b√°c sƒ© ho·∫∑c k·ªπ thu·∫≠t vi√™n

    // üíä Th√¥ng tin li√™n k·∫øt ph√°c ƒë·ªì ARV (n·∫øu c√≥)
    arvregimenId: { type: mongoose.Schema.Types.ObjectId, ref: "ARVRegimen" }, // Li√™n k·∫øt v·ªõi ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã ARV
    reExaminationDate: { type: Date }, // Ng√†y t√°i kh√°m ƒë·ªÅ xu·∫•t
    medicationTime: { type: String }, // Gi·ªù u·ªëng thu·ªëc
    medicationSlot: { type: String }, // Bu·ªïi u·ªëng thu·ªëc (VD: s√°ng, t·ªëi)

    // üìÖ Th√¥ng tin li√™n k·∫øt ƒë·∫∑t l·ªãch kh√°m
    bookingId: { type: mongoose.Schema.Types.ObjectId, ref: "Booking", required: true }, // Li√™n k·∫øt v·ªõi b·∫£ng Booking

    // ü©∫ Th√¥ng tin c∆° b·∫£n v·ªÅ kh√°m b·ªánh ho·∫∑c khi test
    symptoms: { type: String }, // Tri·ªáu ch·ª©ng ghi nh·∫≠n (VD: s·ªët, ho, m·ªát)
    weight: { type: Number }, // C√¢n n·∫∑ng (kg)
    height: { type: Number }, // Chi·ªÅu cao (m)
    bmi: { type: Number }, // Ch·ªâ s·ªë BMI t√≠nh to√°n
    bloodPressure: { type: String }, // Huy·∫øt √°p (VD: "120/80")
    pulse: { type: Number }, // M·∫°ch (l·∫ßn/ph√∫t)
    temperature: { type: Number }, // Nhi·ªát ƒë·ªô c∆° th·ªÉ (¬∞C)
    sampleType: { type: String }, // Lo·∫°i m·∫´u x√©t nghi·ªám (VD: M√°u, N∆∞·ªõc ti·ªÉu)
    testMethod: { type: String }, // Ph∆∞∆°ng ph√°p x√©t nghi·ªám (VD: PCR, Test nhanh)

    // üìä Th√¥ng tin ri√™ng cho x√©t nghi·ªám PCR HIV
    viralLoad: { type: Number }, // T·∫£i l∆∞·ª£ng virus HIV (copies/mL)
    viralLoadReference: { type: String }, // Kho·∫£ng tham chi·∫øu VL (VD: <20 copies/mL)
    viralLoadInterpretation: {
      type: String,
      enum: ["undetectable", "low", "high"], // Di·ªÖn gi·∫£i k·∫øt qu·∫£: Kh√¥ng ph√°t hi·ªán, th·∫•p, cao
    },

    // ‚öñÔ∏è ƒê∆°n v·ªã ƒëo d√πng chung cho VL & CD4
    unit: { type: String }, // VD: "copies/mL" ho·∫∑c "cells/mm¬≥"

    // üìâ Th√¥ng tin ri√™ng cho x√©t nghi·ªám CD4
    cd4Count: { type: Number }, // S·ªë l∆∞·ª£ng t·∫ø b√†o CD4 (cells/mm¬≥)
    cd4Reference: { type: String }, // Kho·∫£ng tham chi·∫øu CD4 (VD: >500)
    cd4Interpretation: {
      type: String,
      enum: ["normal", "low", "very_low"], // Di·ªÖn gi·∫£i k·∫øt qu·∫£ CD4
    },
    coInfections: [{ type: String }], // Danh s√°ch b·ªánh nhi·ªÖm k√®m n·∫øu c√≥ (VD: Vi√™m gan B, Lao, ...)

    // ‚úÖ Th√¥ng tin cho x√©t nghi·ªám nhanh HIV / Ag-Ab
    testResult: {
      type: String,
      enum: ["positive", "negative", "invalid"], // K·∫øt qu·∫£ test nhanh HIV
    },
    interpretationNote: { type: String }, // Ghi ch√∫ di·ªÖn gi·∫£i (VD: C√≥ th·ªÉ test l·∫°i sau 1 tu·∫ßn)
    p24Antigen: { type: Number }, // Gi√° tr·ªã kh√°ng nguy√™n P24 - n·∫øu c√≥ l√† d∆∞∆°ng t√≠nh
    hivAntibody: { type: Number }, // Gi√° tr·ªã kh√°ng th·ªÉ HIV - n·∫øu c√≥ l√† d∆∞∆°ng t√≠nh
  },
  {
    timestamps: true, // T·ª± ƒë·ªông th√™m createdAt & updatedAt
  }
);

module.exports = mongoose.model("Result", ResultSchema);
