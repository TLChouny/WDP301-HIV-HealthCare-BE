const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const ResultSchema = new Schema({
  resultName: { type: String, required: true },
  resultDescription: { type: String },

  // ü©∫ Th√¥ng tin kh√°m
  symptoms: { type: String }, // tri·ªáu ch·ª©ng hi·ªán t·∫°i
  weight: { type: Number }, // c√¢n n·∫∑ng
  height: { type: Number }, // chi·ªÅu cao
  bmi: { type: Number }, // BMI
  bloodPressure: { type: String }, //huy·∫øt √°p
  pulse: { type: Number }, // nh·ªãp m·∫°ch
  temperature: { type: Number }, // nhi·ªát ƒë·ªô

  // üß™ N·∫øu l√† lab test
  sampleType: { type: String }, // lo·∫°i m·∫´u m√°u, huy·∫øt thanh, n∆∞·ªõc ti·ªÉu
  testMethod: { type: String }, // ph∆∞∆°ng ph√°p test: rapid, ELISA, PCR
  resultType: { type: String, enum: ['positive-negative', 'quantitative', 'other'] }, //lo·∫°i kh√°m: √¢m, d∆∞∆°ng, kh√°c
  testResult: { type: String }, // VD: "√Çm t√≠nh", "D∆∞∆°ng t√≠nh"
  testValue: { type: Number }, // VD: s·ªë copies/mL gi√° tr·ªã ƒëo ƒë∆∞·ª£c
  unit: { type: String }, // ƒë∆°n v·ªã cho testValue
  referenceRange: { type: String }, // kho·∫£ng tham chi·∫øu

  // üíä N·∫øu l√† kh√°m ARV
  reExaminationDate: { type: Date }, // Ng√†y t√°i kh√°m
  medicationTime: { type: String }, // Th·ªùi gian u·ªëng thu·ªëc
  medicationSlot: { type: String }, // Bu·ªïi u·ªëng thu·ªëc
  arvregimenId: { type: Schema.Types.ObjectId, ref: 'ARVRegimen' },

  // üîó Li√™n k·∫øt Booking
  bookingId: { type: Schema.Types.ObjectId, ref: 'Booking', required: true },
}, { timestamps: true });


module.exports = mongoose.model("Result", ResultSchema);
